# BlueCollarCRM Development Rules

## Project Overview
BlueCollarCRM is a full-stack, affordable, easy-to-use alternative to Salesforce/HubSpot built specifically for construction, plumbing, electrical, HVAC, landscaping and other blue-collar service companies.

====================  DESIGN-STACK SNIPPET  ====================
# GLOBAL DESIGN STACK

## Typography
- Primary: Inter (system font fallback)
- Monospace: JetBrains Mono
- Scale: 12px, 14px, 16px, 18px, 20px, 24px, 32px, 40px, 48px

## Colors (Blue-Collar Theme)
Primary: #2563eb (Blue 600) - Trust, reliability
Secondary: #f59e0b (Amber 500) - Energy, construction
Success: #10b981 (Emerald 500) - Completion
Warning: #f59e0b (Amber 500) - Caution
Error: #ef4444 (Red 500) - Issues
Gray Scale: slate-50 to slate-900

## Spacing
Base unit: 4px (0.25rem)
Scale: 1, 2, 3, 4, 6, 8, 12, 16, 20, 24, 32, 40, 48, 64

## Shadows
sm: 0 1px 2px 0 rgb(0 0 0 / 0.05)
md: 0 4px 6px -1px rgb(0 0 0 / 0.1)
lg: 0 10px 15px -3px rgb(0 0 0 / 0.1)

## Border Radius
sm: 0.125rem, md: 0.375rem, lg: 0.5rem, xl: 0.75rem

## Animations
Duration: 150ms, 200ms, 300ms
Easing: cubic-bezier(0.4, 0, 0.2, 1)
==================  END DESIGN-STACK SNIPPET  ===================

## Code Style Rules
- Use TypeScript with strict mode always
- Prefer functional components with hooks
- Use descriptive variable names (no abbreviations)
- Keep components under 200 lines
- Extract complex logic to custom hooks
- Use barrel exports for cleaner imports
- Mobile-first approach for all components
- Dark theme as default consideration

## Project Structure
```
/src
  /app              # Next.js app router pages
  /components       # Reusable UI components
    /ui            # Base UI components (buttons, inputs)
    /features      # Feature-specific components
    /layouts       # Layout components
    /mobile        # Mobile-specific components
  /lib             # Utility functions and configurations
  /hooks           # Custom React hooks
  /services        # API service layers
  /graphql         # GraphQL queries, mutations, fragments
  /types           # TypeScript type definitions
  /stores          # Zustand state stores
  /styles          # Global styles and Tailwind config
  /utils           # Helper functions
    /performance   # Performance utilities
    /responsive    # Responsive helpers
```

## Component Guidelines
- Every component must have TypeScript interfaces
- Use composition over inheritance
- Implement loading and error states
- Add proper accessibility attributes
- Use semantic HTML elements
- Implement proper keyboard navigation
- Mobile touch targets minimum 44x44px
- Implement proper ARIA labels
- Support RTL layouts

## Animation Guidelines
- Use Framer Motion for complex animations
- Keep animations under 300ms for UI responsiveness
- Use CSS transitions for simple hover effects
- Implement skeleton loaders for data fetching
- Add micro-interactions for better UX
- Respect prefers-reduced-motion
- GPU-accelerated animations only
- No animations on low-end devices

## Performance Rules
- Lazy load components and routes
- Implement virtual scrolling for large lists
- Use React.memo for expensive components
- Optimize images with next/image
- Implement proper caching strategies
- Use Web Workers for heavy computations
- Target 100 Lighthouse score
- Keep bundle size under 200KB initial
- Implement service workers for offline

## Security Rules
- Sanitize all user inputs
- Implement CSRF protection
- Use environment variables for secrets
- Implement proper CORS policies
- Add rate limiting to APIs
- Use HTTPS everywhere
- Implement proper authentication checks
- Content Security Policy headers
- SQL injection prevention

## Testing Requirements
- Write unit tests for utilities
- Integration tests for API endpoints
- E2E tests for critical user flows
- Maintain 80% code coverage
- Use React Testing Library
- Mobile device testing required
- Performance testing for each release
- Accessibility testing with screen readers

## Mobile-First Development
- Start with 320px viewport
- Progressive enhancement approach
- Touch-first interactions
- Optimize for one-handed use
- Consider thumb reach zones
- Implement pull-to-refresh
- Use native mobile patterns
- Test on real devices 